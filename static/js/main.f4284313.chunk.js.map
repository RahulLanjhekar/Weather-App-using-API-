{"version":3,"sources":["Components/Html.js","App.js","index.js"],"names":["Html","useState","cityName","setcityName","weatherData","setweatherData","temp","pressure","humidity","weatherMood","speed","country","sunset","name","searchWeather","a","url","fetch","resp","json","data","main","weather","wind","sys","console","log","useEffect","date","Date","timeStr","getHours","getMinutes","React","weatherState","setWeatheState","className","type","placeholder","value","onChange","e","target","onClick","toLocaleString","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAgIeA,EA7HF,WACT,MAAgCC,mBAAS,aAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAKIC,EAQAF,EARAE,KACAC,EAOAH,EAPAG,SACAC,EAMAJ,EANAI,SACAC,EAKAL,EALAK,YACAC,EAIAN,EAJAM,MACAC,EAGAP,EAHAO,QACAC,EAEAR,EAFAQ,OACAC,EACAT,EADAS,KAGEC,EAAa,uCAAG,oDAAAC,EAAA,sEAKVC,EALU,4DAKiDd,EALjD,iEAOGe,MAAMD,GAPT,cAOVE,EAPU,gBAQGA,EAAKC,OARR,OAQVC,EARU,SAYqBA,EAAKC,KAAjCf,EAZO,EAYPA,KAAMC,EAZC,EAYDA,SAAUC,EAZT,EAYSA,SACVC,EAAeW,EAAKE,QAAQ,GAAlCD,KACAX,EAASU,EAAKG,KAAdb,MAdO,EAeYU,EAAKI,IAAxBb,EAfO,EAePA,QAASC,EAfF,EAeEA,OACTC,EAAQO,EAARP,KAaPR,EAXyB,CACrBC,OACAC,WACAC,WACAC,cACAC,QACAC,UACAC,SACAC,SA1BU,kDA+BdY,QAAQC,IAAR,MA/Bc,0DAAH,qDAmCvBC,qBAAU,WACNb,MACD,IAGF,IACIc,EAAO,IAAIC,KAAW,IADhBjB,GAENkB,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cAEzC,EAAuCC,IAAMhC,SAAS,IAAtD,mBAAOiC,EAAP,KAAqBC,EAArB,KAyBG,OAvBHR,qBAAU,WACP,GAAIlB,EACF,OAAQA,GACN,IAAK,SACH0B,EAAe,iBACf,MACF,IAAK,OACHA,EAAe,UACf,MACF,IAAK,QAOL,QACEA,EAAe,gBACf,MANF,IAAK,OACHA,EAAe,cAQpB,CAAC1B,IAGE,qCACI,sBAAK2B,UAAU,YAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,cAAcC,MAAOrC,EAAUsC,SAAU,SAACC,GAAD,OAAOtC,EAAYsC,EAAEC,OAAOH,UACtH,wBAAQH,UAAU,eAAeO,QAAS7B,EAA1C,uBAEJ,sBAAKsB,UAAU,UAAf,UACI,qBAAKA,UAAU,OAAf,SACI,mBAAGA,UAAS,aAAQF,OAExB,sBAAKE,UAAU,eAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,OAAf,SACI,+BAAK9B,EAAL,YAEJ,sBAAK8B,UAAU,OAAf,UACI,qBAAKA,UAAU,eAAf,SACK3B,IAEL,sBAAK2B,UAAU,QAAf,UACKvB,EADL,KACaF,WAIrB,qBAAKyB,UAAU,OAAf,UACC,IAAIP,MAAOe,sBAGhB,sBAAKR,UAAU,WAAf,UACI,sBAAKA,UAAU,WAAf,UAA0B,4BAAG,mBAAGA,UAAU,mBAA1C,IAAmEN,EAAnE,MAA8E,uBAA9E,aACA,sBAAKM,UAAU,WAAf,UAA0B,4BAAG,mBAAGA,UAAU,qBAA1C,IAAqE5B,EAArE,IAA+E,uBAA/E,eACA,sBAAK4B,UAAU,WAAf,UAA0B,4BAAG,mBAAGA,UAAU,iBAA1C,IAAiE7B,EAAjE,IAA2E,uBAA3E,eACA,sBAAK6B,UAAU,WAAf,UAA0B,4BAAG,mBAAGA,UAAU,wBAA1C,IAAwE1B,EAAxE,IAA+E,uBAA/E,qBC7GLmC,EATH,WACV,OACE,mCACI,cAAC,EAAD,OCFRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f4284313.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport \"./style.css\"\r\n\r\nconst Html = () => {\r\n    const [cityName, setcityName] = useState(\"bangalore\");\r\n    const [weatherData, setweatherData] = useState({}); // USED TO STORE THE DATA FROM THE API\r\n\r\n                // DESTRUCTURING THE API DATA FOR USE\r\n    \r\n    const {\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        weatherMood, \r\n        speed,\r\n        country,\r\n        sunset,\r\n        name\r\n    } = weatherData;\r\n\r\n    const searchWeather = async () => {\r\n        try {\r\n            \r\n            // FETCHING DATA FROM THE API\r\n\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=8988d88b7c401b8b9d2646f5cf4df0ec`\r\n\r\n            let resp = await fetch(url);\r\n            let data = await resp.json();\r\n\r\n            // DESTRUCTURING THE API DATA WE NEED\r\n\r\n            const {temp, pressure, humidity} = data.main;\r\n            const {main: weatherMood} = data.weather[0];\r\n            const {speed} = data.wind;\r\n            const {country, sunset} = data.sys;\r\n            const {name} = data;\r\n            \r\n            const weatherVariables = {\r\n                temp,\r\n                pressure,\r\n                humidity,\r\n                weatherMood,\r\n                speed,\r\n                country,\r\n                sunset,\r\n                name\r\n            };\r\n\r\n            setweatherData(weatherVariables);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\nuseEffect(() => {\r\n    searchWeather();\r\n}, [])\r\n\r\n // converting the seconds into time\r\n let sec = sunset;\r\n let date = new Date(sec * 1000);\r\n let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n const [weatherState, setWeatheState] = React.useState(\"\");\r\n \r\n useEffect(() => {\r\n    if (weatherMood) {\r\n      switch (weatherMood) {\r\n        case \"Clouds\":\r\n          setWeatheState(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          setWeatheState(\"wi-fog\");\r\n          break;\r\n        case \"Clear\":\r\n          setWeatheState(\"wi-day-sunny\");\r\n          break;\r\n        case \"Mist\":\r\n          setWeatheState(\"wi-dust\");\r\n          break;\r\n\r\n        default:\r\n          setWeatheState(\"wi-day-sunny\");\r\n          break;\r\n      }\r\n    }\r\n  }, [weatherMood]);\r\n\r\n    return (\r\n        <>\r\n            <div className='searchBar'>\r\n                <input type=\"text\" className='input' placeholder='Search City' value={cityName} onChange={(e) => setcityName(e.target.value)}/>\r\n                <button className='searchButton' onClick={searchWeather}>Search</button>\r\n            </div>\r\n            <div className='content'>\r\n                <div className='icon'>\r\n                    <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n                <div className='main-content'>\r\n                    <div className='time'>\r\n                        <div className='temp'>\r\n                            <h1>{temp}&deg;</h1>\r\n                        </div>\r\n                        <div className='mood'>\r\n                            <div className='weather-mood'>\r\n                                {weatherMood}\r\n                            </div>\r\n                            <div className='place'>\r\n                                {name}, {country}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='date'>\r\n                    {new Date().toLocaleString()}\r\n                    </div>\r\n                </div>\r\n                <div className='not-main'>\r\n                    <div className='sections'><p><i className=\"wi wi-sunset\"></i></p> {timeStr} PM<br /> Sunset</div>\r\n                    <div className='sections'><p><i className=\"wi wi-humidity\"></i></p> {humidity} <br /> Humidity</div>\r\n                    <div className='sections'><p><i className=\"wi wi-rain\"></i></p> {pressure} <br /> Pressure</div>\r\n                    <div className='sections'><p><i className=\"wi wi-strong-wind\"></i></p> {speed} <br /> Wind</div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Html\r\n","import React from 'react';\nimport Html from './Components/Html';\n\nconst App = () => {\n  return (\n    <>\n        <Html />\n    </>   \n  )\n};\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n"],"sourceRoot":""}